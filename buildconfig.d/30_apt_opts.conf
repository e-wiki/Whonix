#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## {{ apt_sourcelist_empty apt_sourceparts

## Using short option -o instead of long option --option, because aptitude does
## (used by grml-debootstrap) not support that.

## The EMPTY_DIR variable is provided by the help-steps/variables script.
## export, so chroot-scripts-post.d can read it. It defaults to /tmp/empty.
## You can leave it as is.
if [ "$apt_sourcelist_empty" = "" ]; then
   export apt_sourcelist_empty=" -o Dir::Etc::sourcelist=$EMPTY_DIR "
fi

## The WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER variable is provided by the help-steps/variables script.
## You can leave it as is.
if [ "$apt_sourceparts" = "" ]; then
   export apt_sourceparts=" -o Dir::Etc::sourceparts=$WHONIX_SOURCES_LIST_TEMP_BUILD_FOLDER "
fi

## }}

## {{ apt_verify_opts

## Debugging hint:
## We can simulate building Whonix in a few years by making our system clock
## 10 years faster. There is no frozen torproject repository, so we're not
## using apt_verify_opts there. When simulating this, don't wonder when post
## chroot scripts connecting to torproject's repository fail due to no an
## invalid valid-until field in its release file.

## Check if variable apt_verify_opts is still unset. The builder could have set
## it using '--freshness current' already.
#if [ -z "$apt_verify_opts" ]; then
   ## Variable apt_verify_opts still unset, setting it...

   ## We need to ignore valid-until and handle expired gpg keys, so we can build
   ## from frozen Debian package repository, i.e. from snapshot.debian.org. This
   ## is useful to prevent breakage of the build script due to removed packages
   ## from Debian repositories. Also a prerequisite for verifiable builds.

   ## Ignoring valid-until.
   ## Otherwise apt-get will show an error message looking like this.
   ##     E: Release file for http://snapshot.debian.org/archive/debian-security/20130919T215514Z/dists/testing/updates/InRelease is expired (invalid since 4d 2h 13min 31s). Updates for this repository will not be applied.
   #export apt_verify_opts+=" -o Acquire::Check-Valid-Until=false "

   ## Handling expired gpg key.
   ## Otherwise apt-get will show an error message looking like this.
   ##     "W: GPG error: http://snapshot.debian.org wheezy InRelease: The following signatures were invalid: KEYEXPIRED 1520281423"
   ##
   ## Simple, insecure fix: skip gpg verification.
   ##     --allow-unauthenticated
   ##     This will still show this error message, but apt-get will exit 0.
   ##
   ## Possibly more secure fix: Checking the signature, but ignore it being invalid.
   ## - apt-get does seem to have no option to accept outdated keys?
   ## - adding options to apt-get's gpgv seems broken in apt-get?
   ## - gpgv itself does have no option to ignore expired (just checking validity)?
   ##
   ## Not using this yet. Not yet required and insecure.
   #export apt_verify_opts+=" --allow-unauthenticated "
#fi

## Working around a grml-debootstrap security bug.
## It combines `apt-get install` with `--yes` and `--force-yes`, which could
## lead to installation of unsigned packages.
##
## upstream bug report:
##     https://github.com/grml/grml-debootstrap/issues/62
##
## Research, that shows, that a combination of `--yes`, `--force-yes` and
## `-o APT::Get::force-yes=0` avoids installation of unsigned packages:
##     https://www.whonix.org/wiki/Dev/apt-get
export apt_verify_opts+=" -o APT::Get::force-yes=0 "

## Debugging.
#export apt_verify_opts+=" -o Debug::Acquire::gpgv=true "

## }}

## {{ apt_timeout_opts

## export, so chroot-scripts-post.d can read it
export apt_timeout_opts+=" -o Acquire::http::Timeout=180 "
export apt_timeout_opts+=" -o Acquire::ftp::Timeout=180 "
export apt_timeout_opts+=" -o Acquire::Retries=3 "

## }}

## {{ apt_debug_opts

#export apt_debug_opts+=" -o Debug::pkgPackageManager=true "
#export apt_debug_opts+=" -o Debug::pkgDPkgPM=true "

## }}

## {{ apt_get_update_wrapper

[ -n "$apt_get_update_wrapper_bin_path_full" ] || apt_get_update_wrapper_bin_path_full="/usr/lib/apt-get-wrapper"
[ -n "$apt_get_update_wrapper_source_path_full" ] || apt_get_update_wrapper_source_path_full="$WHONIX_SOURCE_FOLDER/packages/whonixcheck/$apt_get_update_wrapper_bin_path_full"

export apt_get_update_wrapper_bin_path_full
export apt_get_update_wrapper_source_path_full

## }}

## {{ unattended options

[ -n "$DEBIAN_FRONTEND" ] || DEBIAN_FRONTEND="noninteractive"
[ -n "$DEBIAN_PRIORITY" ] || DEBIAN_PRIORITY="critical"
[ -n "$DEBCONF_NOWARNINGS" ] || DEBCONF_NOWARNINGS="yes"
[ -n "$APT_LISTCHANGES_FRONTEND" ] || APT_LISTCHANGES_FRONTEND="text"
export DEBIAN_FRONTEND DEBIAN_PRIORITY DEBCONF_NOWARNINGS APT_LISTCHANGES_FRONTEND

## }}
