#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## errorhandlergeneral | errorhandlerunchrootunpreventunmount | errorhandlerunmount
## -> errorhandlerprocessshared -> functiontracefunction -> processbacktracefunction -> errorhandlershell -> errorhandlerretry -> errorhandlermaybeexit

if [ ! "$whonix_build_no_unset_xtrace" ]; then
   set +x
fi
#set -x
set -e
set -o pipefail
set -o errtrace
shopt -s extdebug

output_cmd_set() {
   if [ -o xtrace ]; then
      output_cmd=echo
   else
      output_cmd=echo
   fi
}

error() {
   $output_cmd "${blue}############################################################${reset}"
   $output_cmd "${red}${bold}${under}ERROR${eunder}: ${1}${reset}"
   $output_cmd "${blue}############################################################${reset}"
   error_ "See above! (There should be a bold, red message surrounded by blue hashtags (#).)"
   true
}

functiontracefunction() {
   $output_cmd "INFO: BEGIN: $FUNCNAME"
   if [ -o xtrace ]; then
      set +x
      local xtrace_reenable="true"
   fi
   local frame temp one two
   frame="0"
   while caller >/dev/null 2>&1 $frame; do
      temp="$(caller $frame)" || true
      read one two _ <<< "$temp"
      if [ "$function_trace_result" = "" ] ; then
         function_trace_result="$two (line number: $one)"
      else
         function_trace_result="$function_trace_result
$two (line number: $one)"
      fi
      frame="$(( $frame + 1 ))" || true
   done
   function_trace_result="$(echo "$function_trace_result" | tac)" || true
   if [ "$xtrace_reenable" = "true" ]; then
      set -x
   fi
   $output_cmd "INFO: END  : $FUNCNAME"
}

## {{{ processbacktracefunction - GPL v2.0 (only)

processbacktracefunction() {
   ## function    : processbacktracefunction
   ## Copyright   : Gian Paolo Ghilardi
   ## LICENSE     : GPL v2.0 (only)
   ## Source      : http://stackoverflow.com/a/1438241/2605155
   ## Modification: Patrick Schleizer
   $output_cmd "INFO: BEGIN: $FUNCNAME"
   if [ -o xtrace ]; then
      set +x
      local xtrace_reenable="true"
   fi
   local TRACE CP CMDLINE PP
   TRACE=""
   CP="$$" ## PID of the script itself [1]
   while true ## safe because "all starts with init..."
   do
           CMDLINE="$(cat /proc/$CP/cmdline | tr '\000' ' ')" || true
           PP="$(grep PPid /proc/$CP/status | awk '{ print $2; }')" || true ## [2]
           TRACE="$TRACE : $CMDLINE\n"
           if [ "$CP" = "1" ]; then # we reach 'init' [PID 1] => backtrace end
                   break
           fi
           CP="$PP"
   done
   process_backtrace_result="$(echo -en "$TRACE" | tac | grep -n ":")" || true ## using tac to "print in reverse" [3]
   if [ "$xtrace_reenable" = "true" ]; then
      set -x
   fi
   $output_cmd "INFO: END  : $FUNCNAME"
}

## }}} processbacktracefunction - GPL v2.0 (only)

errorhandlershell() {
   $output_cmd "${cyan}${bold}INFO: Opening interactive shell...${reset}"
   $output_cmd "${cyan}${bold}INFO: When you have finished, please enter \"exit 0\" to \
continue (Recommended against!) or \"exit 1\" to cleanup and exit. (Recommended.)${reset}"
   interactive_chroot_shell_bash_exit_code="0"
   $CHROOT /bin/bash || { interactive_chroot_shell_bash_exit_code="${PIPESTATUS[0]}" ; true; };
   if [ "$interactive_chroot_shell_bash_exit_code" = "0" ]; then
      $output_cmd "${cyan}${bold}INFO: Interactive shell termited with \
exit code $interactive_chroot_shell_bash_exit_code, will ignore this error and continue...${reset}"
      ignore_error="true"
   else
      $output_cmd "${cyan}${bold}INFO: Interactive shell termited with \
exit code $interactive_chroot_shell_bash_exit_code, cleanup and exit as requested...${reset}"
      ignore_error="false"
   fi
}

errorhandlerretry() {
   if [ ! "$whonix_build_dispatch_before_retry" = "" ]; then
      $output_cmd "${cyan}${bold}INFO: dispatch before retry (--retry-before)...: $whonix_build_dispatch_before_retry ${reset}"
      whonix_build_dispatch_before_retry_exit_code="0"
      eval $whonix_build_dispatch_before_retry || { whonix_build_dispatch_before_retry_exit_code="$?" ; true; };
      if [ "$whonix_build_dispatch_before_retry_exit_code" = "0" ]; then
         $output_cmd "${cyan}${bold}INFO: dispatch before retry (--retry-after) exit code was 0, ok. ${reset}"
      else
         $output_cmd "${red}${bold}INFO: dispatch before retry (--retry-before) non-zero exit code: $whonix_build_dispatch_before_retry_exit_code ${reset}"
      fi
   else
      $output_cmd "INFO: Skipping whonix_build_dispatch_before_retry (--retry-before), because empty, ok."
   fi

   $output_cmd "${cyan}${bold}INFO: Retrying last_failed_bash_command...: $last_failed_bash_command ${reset}"
   retry_last_failed_bash_command_exit_code="0"
   eval $last_failed_bash_command || { retry_last_failed_bash_command_exit_code="$?" ; true; };
   if [ "$retry_last_failed_bash_command_exit_code" = "0" ]; then
      $output_cmd "${cyan}${bold}INFO: Retry succeeded. exit code of last_failed_bash_command: $retry_last_failed_bash_command_exit_code ${reset}"
      unset whonix_build_auto_retry_counter
   else
      $output_cmd "${red}${bold}INFO: Retry failed. exit code of last_failed_bash_command: $retry_last_failed_bash_command_exit_code ${reset}"
      last_failed_exit_code="$retry_last_failed_bash_command_exit_code"
      last_failed_bash_command="$last_failed_bash_command"
   fi

   if [ ! "$whonix_build_dispatch_after_retry" = "" ]; then
      $output_cmd "${cyan}${bold}INFO: dispatch after retry (--retry-after)...: $whonix_build_dispatch_after_retry ${reset}"
      whonix_build_dispatch_after_retry_exit_code="0"
      eval $whonix_build_dispatch_after_retry || { whonix_build_dispatch_after_retry_exit_code="$?" ; true; };
      if [ "$whonix_build_dispatch_after_retry_exit_code" = "0" ]; then
         $output_cmd "${cyan}${bold}INFO: dispatch after retry (--retry-after) exit code was 0, ok. ${reset}"
      else
         $output_cmd "${red}${bold}INFO: dispatch after retry (--retry-after) non-zero exit code: $whonix_build_dispatch_after_retry_exit_code ${reset}"
      fi
   else
      $output_cmd "INFO: Skipping whonix_build_dispatch_after_retry (--retry-after), because empty, ok."
   fi

   if [ "$retry_last_failed_bash_command_exit_code" = "0" ]; then
      return 0
   else
      errorhandlerprocessshared "NONE_(called_by_errorhandlerretry)"
   fi
}

errorhandlerprocessshared() {
   last_script="$0"
   ## $1 contains trap signal type.
   trap_signal_type_previous="$trap_signal_type_last"
   if [ "$trap_signal_type_previous" = "" ]; then
      trap_signal_type_previous="unset"
   fi
   trap_signal_type_last="$1"
   whonix_build_error_counter="$(( $whonix_build_error_counter + 1 ))"
   benchmark_took_time="$(benchmarktimeend "$benchmark_time_start")" || true
   processbacktracefunction ## sets process_backtrace_result
   functiontracefunction ## sets function_trace_result
   $output_cmd "
${cyan}${bold}############################################################${reset}
${red}${bold}ERROR in ${under}$last_script${eunder} detected!${reset}
${red}${bold}anon_dist_build_version${reset}: $anon_dist_build_version
(whonix_build_error_counter: $whonix_build_error_counter)
(benchmark: $benchmark_took_time)
trap_signal_type_previous: $trap_signal_type_previous
${red}${bold}trap_signal_type_last${reset}    : $trap_signal_type_last
${red}${bold}process_backtrace_result${reset}:
$process_backtrace_result
${red}${bold}function_trace_result${reset}:
$function_trace_result
${red}${bold}last_failed_bash_command${reset}: ${bold}$last_failed_bash_command${reset}
${red}${bold}last_failed_exit_code${reset}: ${under}$last_failed_exit_code${reset}
${red}${bold}ERROR in ${under}$last_script${eunder} detected!${reset}
${cyan}${bold}############################################################${reset}
"

   if [ "$trap_signal_type_last" = "INT" ] || [ "$trap_signal_type_last" = "TERM" ]; then
      $output_cmd "${red}${bold}INFO: signal $trap_signal_type_last received.${reset}"
      errorhandlerprocessshared "NONE_(called_because_int_or_term)"
      ## Can return here, because next that will happen is receiving signal ERR.
      return 0
   fi

   if [ "$trap_signal_type_last" = "ERR" ] || [ "$trap_signal_type_last" = "NONE_(called_by_errorhandlerretry)" ] ; then
      $output_cmd "INFO: trap_signal_type_last: $trap_signal_type_last, considering auto retry..."
      if [ ! "$whonix_build_auto_retry" = "0" ]; then
         if [ "$whonix_build_auto_retry_counter" = "" ]; then
            whonix_build_auto_retry_counter="1"
         fi
         [ -n "$whonix_build_auto_retry" ] || whonix_build_auto_retry="1"
         [ -n "$whonix_build_wait_auto_retry" ] || whonix_build_wait_auto_retry="5"
         local first
         read -r first _ <<< "$last_failed_bash_command"
         if [ "$first" = "error_" ]; then
            $output_cmd 'INFO: No auto retry because first item of last_failed_bash_command is "error_".'
         elif [ "$whonix_build_auto_retry_counter" -gt "$whonix_build_auto_retry" ]; then
            $output_cmd "${cyan}${bold}INFO: Auto retried (--retry-max) already $whonix_build_auto_retry times. No more auto retry. ${reset}"
         else
            $output_cmd "${cyan}${bold}INFO: Auto retry attempt number: $whonix_build_auto_retry_counter. Max retry attempts: $whonix_build_auto_retry (--retry-max). Auto retry... ${reset}"
            whonix_build_auto_retry_counter="$(( $whonix_build_auto_retry_counter + 1 ))"
            if [ ! "$whonix_build_wait_auto_retry" = "0" ]; then
               $output_cmd "${cyan}${bold}INFO: Waiting (--retry-wait) $whonix_build_wait_auto_retry seconds before auto retry... ${reset}"
               sleep "$whonix_build_wait_auto_retry" &
            fi
            wait "$!"
            ignore_error="$output_cmd"
            error_handler_do_retry="$output_cmd"
            errorhandlerretry
            return 0
         fi
      else
         $output_cmd "INFO: whonix_build_auto_retry set to $whonix_build_auto_retry (--retry-max). No auto retry."
      fi
   else
      $output_cmd "INFO: No auto retry for non ERR signal type: $trap_signal_type_last"
   fi
   unset whonix_build_auto_retry_counter

   ## Default.
   ignore_error="false"

   answer=""
   if [ "$trap_signal_type_last" = "ERR" ] || [ "$trap_signal_type_last" = "NONE_(called_by_errorhandlerretry)" ] || [ "$trap_signal_type_last" = "NONE_(called_because_int_or_term)" ] ; then
      $output_cmd "INFO: whonix_build_non_interactive: $whonix_build_non_interactive"
      if [ "$whonix_build_non_interactive" = "true" ]; then
         $output_cmd "INFO: using non-interactive error handler."
      else
         if [ -t "0" ]; then
            $output_cmd "INFO: stdin connected to terminal, using interactive error handler."
            $output_cmd "\
${red}${bold}ERROR in $0 detected!
Please have a look above (the block within ${cyan}${bold}###${reset}${red}${bold}...), note the command that failed, last_failed_exit_code and its output (further above).
- Please enter c and press enter to ignore the error and continue building. (Recommended against!)
- Please press r and enter to retry.
- Please press s and enter to open an chroot interactive shell.
- Please press enter to cleanup and exit.${reset}"
            read -p "Answer? " answer
         else
            $output_cmd "INFO: stdin not connected to terminal, using non-interactive error handler."
         fi
      fi
   else
      $output_cmd "INFO: Aborting because of non ERR signal type: $trap_signal_type_last"
      return 0
   fi
   error_handler_do_retry=""
   interactive_chroot_shell=""
   if [ "$answer" = "continue" ] || [ "$answer" = "c" ]; then
      ignore_error="true"
      interactive_chroot_shell="false"
   elif [ "$answer" = "s" ] || [ "$answer" = "shell" ]; then
      interactive_chroot_shell="true"
      errorhandlershell
   elif [ "$answer" = "r" ] || [ "$answer" = "retry" ]; then
      ignore_error="true"
      interactive_chroot_shell="false"
      error_handler_do_retry="true"
      errorhandlerretry
   else
      ignore_error="false"
      interactive_chroot_shell="false"
   fi
}

if [ "$whonix_build_error_counter" = "" ]; then
   whonix_build_error_counter="0"
fi

errorhandlermaybeexit() {
   if [ "$error_handler_do_retry" = "true" ]; then
      if [ "$last_failed_bash_command" = "0" ]; then
         true "INFO ($FUNCNAME): auto retry succeeded. Will not exit. Continue."
         return 0
      fi
   fi
   if [ "$ignore_error" = "true" ]; then
      abort_or_continue="Continue"
   else
      abort_or_continue="Aborted"
      ## Removing temporary debian testing (jessie) repository.
      rm --force "/etc/apt/sources.list.d/whonix_temp.list"
      ## Remove lockfile for whonixcheck.
      rm --force "/var/run/package_manager_lock"
   fi
   if [ "$ignore_error" = "true" ]; then
      $output_cmd "INFO: whonix_build_non_interactive: $whonix_build_non_interactive"
      if [ "$whonix_build_non_interactive" = "true" ]; then
         $output_cmd "INFO: using non-interactive error handler."
      else
         $output_cmd "${red}${bold}You have chosen to ignore this error. Your build may be unstable!
This is recommended against unless you know what you are doing. Do not report
bugs, that are a result of this! Please press enter to continue. ${reset}"
      fi
   else
      if [ "$trap_signal_type_last" = "INT" ] || [ "$trap_signal_type_last" = "TERM" ]; then
         $output_cmd "INFO $FUNCNAME: trap_signal_type_last: $trap_signal_type_last"
         return 0
      fi
      trap - EXIT
      $output_cmd "${red}${bold}INFO: Now exiting from $last_script (because error was detected, see above) with exit code ${under}1${eunder}.${reset}"
      exit 1
   fi
}

errorhandlergeneral() {
   last_failed_exit_code="$?"
   last_failed_bash_command="$BASH_COMMAND"
   output_cmd_set
   $output_cmd "${cyan}INFO: Middle of function $FUNCNAME of $0.${reset}"
   ## $1 contains trap signal type.
   errorhandlerprocessshared "$1"
   errorhandlermaybeexit "$1"
   $output_cmd "${cyan}INFO: End of function $FUNCNAME of $0.${reset}"
}

errorhandlerunchrootunpreventunmount() {
   last_failed_exit_code="$?"
   last_failed_bash_command="$BASH_COMMAND"
   output_cmd_set
   ## $1 contains trap signal type.
   errorhandlerprocessshared "$1"
   if [ "$ignore_error" = "false" ]; then
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/remove-local-temp-apt-repo
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unchroot-raw
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unprevent-daemons-from-starting
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-raw
   fi
   errorhandlermaybeexit "$1"
}

errorhandlerunmount() {
   last_failed_exit_code="$?"
   last_failed_bash_command="$BASH_COMMAND"
   output_cmd_set
   ## $1 contains trap signal type.
   errorhandlerprocessshared "$1"
   if [ "$ignore_error" = "false" ]; then
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-raw
   fi
   errorhandlermaybeexit "$1"
}

## Thanks to:
## camh
## http://stackoverflow.com/a/2183063/2605155
errorhandlersetup() {
   local handler signal
   ## $1 contains the name of the error handler function.
   handler="$1" ; shift
   for signal ; do
       trap "$handler $signal" "$signal"
   done
}

output_cmd_set

errorhandlersetup "errorhandlergeneral" ERR INT TERM
set +e

export -f errorhandlershell
export -f errorhandlerretry
export -f errorhandlerprocessshared
export -f errorhandlermaybeexit
export -f errorhandlergeneral
export -f errorhandlerunchrootunpreventunmount
export -f errorhandlerunmount
export -f errorhandlersetup
export -f functiontracefunction
export -f processbacktracefunction

errorhandlersetup "errorhandlergeneral" ERR INT TERM

bash -n "$BASH_SOURCE"

maybe_set_plus_x() {
   if [ "$MINUS_X_SET" = "1" ]; then
      set +x
   fi
}

## Thanks to  perreal for the convertsecs function.
## http://stackoverflow.com/a/12199798
convertsecs() {
   local h m s
   ((h="${1}/3600")) || true
   ((m="(${1}%3600)/60")) || true
   ((s="${1}%60")) || true
   printf "%02d:%02d:%02d\n" "$h" "$m" "$s" || true
}

export -f convertsecs

benchmark_time_start() {
   export benchmark_time_start="$(date +%s)" || true
}

benchmarktimeend() {
   benchmarktimeend="$(date +%s)" || true
   benchmark_took_seconds="$(( $benchmarktimeend - $1 ))" || true
   echo "$(convertsecs "$benchmark_took_seconds")" || true
}

export -f benchmarktimeend

benchmark_time_start

exithandler() {
   local exit_code="$?"
   if [ ! "$exit_code" = "0" ]; then
      exit "$exit_code"
   fi
   benchmark_took_time="$(benchmarktimeend "$benchmark_time_start")" || true
   output_cmd_set
   ## XXX
   if [ "$exit_code" = "0" ]; then
      $output_cmd "${bold}INFO: End of: $0 | exit_code: ${under}$exit_code${eunder} | error(s) detected: ${under}$whonix_build_error_counter${eunder} | benchmark: $benchmark_took_time${reset}"
   else
      $output_cmd "${bold}${red}ERROR: Now exiting from $0 with non-zero exit code ${under}$exit_code${eunder} (error(s) detected: ${under}$whonix_build_error_counter${eunder}) (benchmark: $benchmark_took_time)${reset}${bold}${red}.${reset}"
   fi
   exit "$exit_code"
}

export -f exithandler

trap "exithandler" EXIT

root_check() {
   if [ "$(id -u)" != "0" ]; then
       echo "${red}${bold}ERROR: This must be run as root (sudo)!${reset}"
       exit 1
   else
       $output_cmd "INFO: Script running as root."
   fi
}

lower_priorities() {
   ## Lower IO priority.
   ionice -c3 -p$$

   ## Debugging.
   ionice >/dev/null

   ## Lower CPU priority.
   renice +19 -p $$ >/dev/null

   ## Debugging.
   nice >/dev/null

   export whonix_build_already_lowered_priorities="true"
}

if [ ! "$whonix_build_already_lowered_priorities" = "true" ]; then
   lower_priorities
fi

#echo "${bold}Currently running script: $BASH_SOURCE${reset}"

set -x
