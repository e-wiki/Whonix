#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source colors
source variables

root_check

## Debugging function.
apt_get_parse_unmet_dependency() {
   local pkg_unmet
   pkg_unmet="$1"
   true "INFO: Running \"dpkg -l | grep $pkg_unmet\"..."
   $CHROOT dpkg -l | grep "$pkg_unmet" || true
   $CHROOT apt-cache policy "$pkg_unmet" || true

   local line

   ## Thanks to:
   ## http://blog.edwards-research.com/2010/01/quick-bash-trick-looping-through-output-lines/

   set +x

   declare -A -g remember_pkg

   while read -r -d $'\n' line; do
      local unmet_dependency=""
      unmet_dependency="$(echo "$line" | grep -o "Depends:.*" | awk '{print $2}')" || true
      if [ "$unmet_dependency" = "" ]; then
         ## no match
         continue
      else
         ## match
         if [ "${remember_pkg[$unmet_dependency]}" = "true" ]; then
            continue
         fi
         echo "${bold}${cyan}INFO: Found unmet dependency: $unmet_dependency. \
Will try to manually install it for debugging...${reset}"
         remember_pkg[$unmet_dependency]="true"
         set -x
         true "INFO: Running \"dpkg -l | grep $unmet_dependency\"..."
         $CHROOT dpkg -l | grep "$unmet_dependency" || true
         $CHROOT apt-cache policy "$unmet_dependency" || true
         pkg-install-maybe "$unmet_dependency" || true
         set +x
         echo "${bold}${cyan}INFO: Attempt to install unmet_dependency: $unmet_dependency done.${reset}"
         continue
      fi
   done < <( echo "$apt_get_output" )

   set -x
}

pkg-install-maybe() {
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   local pkg_install
   pkg_install="$1"
   local skip_package
   for skip_package in $whonix_build_script_skip_package_install; do
      if [ "$skip_package" = "$pkg_install" ]; then
         unset skip_package
         true "${bold}${cyan}INFO: Skipping $pkg_install, because whonix_build_script_skip_package_install includes it.${reset}"
         return 0
      fi
   done
   unset skip_package

   true "${cyan}INFO: Installing $pkg_install, because whonix_build_script_skip_package_install does not include it... \
This may take a while...${reset}"

   ## apt: no way to view dpkg commandline and still run dpkg
   ## https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=52670
   local apt_get_exit_code="0"
   $CHROOT \
      apt-get \
         $apt_sourcelist_empty \
         $apt_sourceparts \
         $apt_timeout_opts \
         $apt_verify_opts \
         $apt_unattended_opts \
         $apt_misc_opts \
         $apt_debug_opts \
         --yes \
         --no-install-recommends \
         install \
         "$pkg_install" \
         || { apt_get_exit_code="$?" ; true; };

   local apt_get_exit_code="0"
   $CHROOT \
      apt-get \
         $apt_sourcelist_empty \
         $apt_sourceparts \
         $apt_timeout_opts \
         $apt_verify_opts \
         $apt_unattended_opts \
         $apt_misc_opts \
         --yes \
         --no-install-recommends \
         install \
         "$pkg_install" \
         || { apt_get_exit_code="$?" ; true; };

   $CHROOT sync
   sync

   if [ "$apt_get_exit_code" = "0" ]; then
      true "${cyan}INFO: Installed $pkg_install, no error detected.${reset}"
      return 0
   fi

   true "${bold}${red}ERROR: Failed to install $pkg_install. (apt_get_exit_code: $apt_get_exit_code) \
Attempting to gather debug output to diagnose the problem...${reset}"

   true "${bold}${cyan}INFO: Read output of apt-get trying to install $pkg_install into a \
variable for debugging. This may take a while...${reset}"

   local apt_get_exit_code="0"
   apt_get_output=" \
         $( \
            $CHROOT \
               apt-get \
                  $apt_sourcelist_empty \
                  $apt_sourceparts \
                  $apt_timeout_opts \
                  $apt_verify_opts \
                  $apt_unattended_opts \
                  $apt_misc_opts \
                  --yes \
                  --no-install-recommends \
                  install \
                  "$pkg_install" \
                  2>&1 \
         ) \
      " \
      || { apt_get_exit_code="$?" ; true; };

   $CHROOT sync
   sync

   if [ "$apt_get_exit_code" = "0" ]; then
      true "${bold}${red}ERROR: Second attempt installing $pkg_install did not fail?!?${reset}"
      error "See above!"
      return 0
   fi

   true "${bold}${red}ERROR: As expected, failed again to install $pkg_install. (apt_get_exit_code: $apt_get_exit_code) \
Trying to diagnose the problem using function apt_get_parse_unmet_dependency...${reset}"

   apt_get_parse_unmet_dependency "$pkg_install"

   true "INFO: Tried to diagnose the problem using function apt_get_parse_unmet_dependency."

   error "See above!"
   return 0
}

backup-file-if-exists() {
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   if [ ! -d "$WHONIX_BINARY/system-files-backup" ]; then
      sudo -E -u "$user_name" mkdir --parents "$WHONIX_BINARY/system-files-backup"
   fi

   local base_name
   base_name="$(basename "$1")"

   if [ -f "$1" ]; then
      cp --no-clobber --preserve "$1" "$1.backup"
      sudo -E -u "$user_name" cp --no-clobber --preserve "$1" "$WHONIX_BINARY/system-files-backup/$base_name"
   else
      true "INFO: file $1 does not exist, skipping backup, ok."
   fi
   true
}

install-packages() {
   errorhandlersetup "errorhandlerunchrootunpreventunmount" ERR INT TERM

   sync

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/mount-raw"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/prevent-daemons-from-starting"

   sync

   ## Sanity tests.
   $CHROOT sync

   sync

   ## Backup exiting /etc/apt/sources.list, might be useful for bare metal users.
   backup-file-if-exists "$CHROOT_FOLDER/etc/apt/sources.list"

   ## Backup exiting /etc/resolv.conf, so we can later use it in help-steps/chroot-img.
   backup-file-if-exists "$CHROOT_FOLDER/etc/resolv.conf"

   ## Backup exiting /etc/hosts so we can later use it in help-steps/chroot-img.
   backup-file-if-exists "$CHROOT_FOLDER/etc/hosts"

   ## Backup exiting /etc/hostname so we can later use it in help-steps/chroot-img.
   backup-file-if-exists "$CHROOT_FOLDER/etc/hostname"

   ## Backup exiting /etc/network/interfaces so we can later use it in help-steps/chroot-img.
   backup-file-if-exists "$CHROOT_FOLDER/etc/network/interfaces"

   ## We have to fix /etc/apt/sources.list, because the list which comes with
   ## grml-debootstrap is incomplete (does not complain debian security repository) and points to 127.0.0.1.
   mv "$CHROOT_FOLDER/etc/apt/sources.list" "$CHROOT_FOLDER/etc/apt/sources.list.backup" || true

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/create-local-temp-apt-repo"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/chroot-raw"

   ## Debugging.
   $CHROOT ls -la /mnt/initialdeb/dists/local/ || true
   $CHROOT ls -la /mnt/initialdeb/dists/local/main/binary-i386/ || true

   ## XXX
   ## Make the wrapper available.
   cp "$apt_get_update_wrapper_source_path_full" "$CHROOT_FOLDER/$apt_get_update_wrapper_bin_path_full"

   $CHROOT $apt_get_update_wrapper_bin_path_full $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_get_gpgv_opts $apt_unattended_opts $apt_misc_opts update

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unchroot-raw"

   ## {{ controversy of: /etc/resolv.conf /etc/hosts /etc/hostname /etc/network/interfaces,
   ##    see help-steps/chroot-raw for more information.

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/create-local-temp-apt-repo"
   export WHONIX_CHROOT_MOUNT_RESOLV_CONF="0"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/chroot-raw"

   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      pkg-install-maybe whonix-gateway-packages-dependencies-pre
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      pkg-install-maybe whonix-workstation-packages-dependencies-pre
   else
      error "${red}${bold}ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!${reset}"
   fi

   unset WHONIX_CHROOT_MOUNT_RESOLV_CONF
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unchroot-raw"

   ## }}

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/create-local-temp-apt-repo"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/chroot-raw"

   ## Reading apt repository containing snapshot.debian.org and repository containing Whonix's packages.
   $CHROOT $apt_get_update_wrapper_bin_path_full $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_get_gpgv_opts $apt_unattended_opts $apt_misc_opts update

   ## Debugging.
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts $apt_misc_opts clean
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts $apt_misc_opts autoclean
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts $apt_misc_opts --fix-broken --yes install
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts $apt_misc_opts --fix-missing --yes install
   $CHROOT apt-get $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts $apt_misc_opts --fix-broken --fix-missing --yes install
   $CHROOT dpkg --configure -a
   $CHROOT dpkg --audit

   ## While (grml-)debootstrap only used
   ## "deb http://snapshot.debian.org/archive/debian/[...]" we're now also
   ## including "deb http://snapshot.debian.org/archive/debian-security/[...]".
   ## Lets upgrade from the frozen snapshot debian-security repository (if
   ## anything). For whatever that's worth. (We're not using Debian's current
   ## repositories anyway, but can't hurt. More useful for custom builders who
   ## prefer to build from Debian's current repository.)
   $CHROOT apt-get $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts $apt_unattended_opts $apt_misc_opts --yes dist-upgrade

   ## Debugging.
   $CHROOT apt-cache policy
   $CHROOT grep "Package: zenity" "/var/lib/apt/lists/"* || true
   $CHROOT apt-cache policy zenity || true

   ## Debugging.
   $CHROOT apt-cache policy kde-workspace || true
   $CHROOT apt-cache policy kdm || true
   $CHROOT apt-cache policy okular || true
   $CHROOT apt-cache policy zenity || true
   $CHROOT apt-cache policy debsums || true

   if [ "$whonix_build_script_skip_package_install" = "" ]; then
      true "${bold}${cyan}INFO $BASH_SOURCE: Variable whonix_build_script_skip_package_install is empty. \
No packages will be excluded from installation. This information is relevant for builders using custom configurations, \
skipping packages such as Terminal-Only.${reset}"
   else
      true "${bold}${cyan}INFO $BASH_SOURCE: List of packages to be excluded from installation. This information is relevant for \
builders using custom configurations, skipping packages such as Terminal-Only. whonix_build_script_skip_package_install: \
$whonix_build_script_skip_package_install${reset}"
   fi

   pkg-install-maybe anon-shared-build-apt-sources-tpo
   pkg-install-maybe anon-shared-build-upgrade-torsocks

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ] || [ "$WHONIX_BUILD_QUBES" = "true" ]; then
      true "${bold}${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set to 1 or WHONIX_BUILD_QUBES is set to true. Skipping kernel installation (one should already be installed), ok.${reset}"
   else
      if [ "$BUILD_KERNEL_PKGS" = "none" ]; then
         true "${bold}${cyan}INFO: BUILD_KERNEL_PKGS: ${BUILD_KERNEL_PKGS} - Skipping kernel installation.${reset}"
      else
         true "${bold}${cyan}INFO: Neither ANON_BUILD_INSTALL_TO_ROOT is set not set to 1 nor WHONIX_BUILD_QUBES is set to true. Starting kernel installation...${reset}"
         true "${bold}${cyan}INFO: BUILD_KERNEL_PKGS: ${BUILD_KERNEL_PKGS}${reset}"
         local build_kernel
         for build_kernel in $BUILD_KERNEL_PKGS; do
            pkg-install-maybe "$build_kernel"
         done
      fi
      if [ "$BUILD_HEADER_PKGS" = "none" ]; then
         true "${bold}${cyan}INFO: BUILD_HEADER_PKGS: ${BUILD_HEADER_PKGS} - Skipping kernel header installation.${reset}"
      else
         true "${bold}${cyan}INFO: kernel installation done.${reset}"
         true "${bold}${cyan}INFO: Neither ANON_BUILD_INSTALL_TO_ROOT is set not set to 1 nor WHONIX_BUILD_QUBES is set to true. Starting kernel header installation...${reset}"
         true "${bold}${cyan}INFO: BUILD_HEADER_PKGS: ${BUILD_HEADER_PKGS}${reset}"
         local build_header
         for build_header in $BUILD_HEADER_PKGS; do
            pkg-install-maybe "$build_header"
         done
         true "${bold}${cyan}INFO: kernel header installation done.${reset}"
      fi
   fi

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ] || [ "$WHONIX_BUILD_QUBES" = "true" ]; then
      true "${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set to 1 or WHONIX_BUILD_QUBES is set to true, skipping installation of grub-screen-resolution and grub-output-verbose, ok.${reset}"
   else
      pkg-install-maybe grub-screen-resolution
      pkg-install-maybe grub-output-verbose
   fi

   if [ "$ANON_BUILD_INSTALL_TO_ROOT" = "1" ] || [ "$WHONIX_BUILD_QUBES" = "true" ]; then
      true "${cyan}INFO: ANON_BUILD_INSTALL_TO_ROOT is set to 1 or WHONIX_BUILD_QUBES is set to true, skipping installation of weak recommended guest additions packages, ok.${reset}"
   else
      ## Weak recommended packages. No other package depends on it. Can be
      ## easily uninstalled. For better usability.
      if [ "$WHONIX_BUILD_VIRTUALBOX" = "true" ]; then
         ## virtualbox-guest-dkms is required VirtualBox guest addtions module
         ## building. Need to manually install it, because we are
         ## using --no-install-recommends and because neither
         ## virtualbox-guest-x11 nor virtualbox-guest-utils depends on it.
         pkg-install-maybe virtualbox-guest-dkms
         pkg-install-maybe virtualbox-guest-x11
      else
         true "${cyan}INFO: skipping installation of weak recommended guest additions package virtualbox-guest-x11, because not using --target virtualbox, ok.${reset}"
      fi
      if [ "$WHONIX_BUILD_QCOW2" = "true" ]; then
         pkg-install-maybe spice-vdagent
         pkg-install-maybe qxl-xorg-enhance
      else
         true "${cyan}INFO: skipping installation of weak recommended guest additions packages spice-vdagent and qxl-xorg-enhance because not using --target qcow2, ok.${reset}"
      fi
   fi

   if [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      ## Make sure 'anon-ws-disable-stacked-tor' gets installed before
      ## 'anon-shared-packages-dependencies', which depends on 'sdwdate' which
      ## depends on 'tor', so 'tor' does not needlessly installed on the
      ## workstation.
      pkg-install-maybe anon-ws-disable-stacked-tor
   fi

   pkg-install-maybe anon-shared-build-log-build-version
   pkg-install-maybe anon-shared-build-remember-sources
   pkg-install-maybe anon-shared-build-ban-nonfree
   pkg-install-maybe anon-shared-build-sanity-checks

   pkg-install-maybe anon-shared-packages-dependencies
   pkg-install-maybe anon-shared-packages-recommended

   pkg-install-maybe anon-shared-desktop

   ## Keep already existing /etc/NetworkManager/NetworkManager.conf by qubes-core-agent-linux.
   ## Avoid dpkg interactive conflict resultion dialog while building.
   ## workaround for Qubes issue:
   ## 'use /etc/NetworkManager/conf.d snippet instead of /etc/NetworkManager/NetworkManager.conf to avoid dpkg interactive conflict resolution dialog questions'
   ## https://github.com/QubesOS/qubes-issues/issues/1176
   local temp
   temp=" -o Dpkg::Options::=--force-confold "
   apt_unattended_opts+="$temp"
   pkg-install-maybe anon-shared-desktop-kde
   apt_unattended_opts="$(echo "$apt_unattended_opts" | sed "s|$temp||g")"

   pkg-install-maybe anon-shared-kde-accessibility

   pkg-install-maybe whonix-shared-packages-dependencies
   pkg-install-maybe whonix-shared-packages-recommended

   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      pkg-install-maybe anon-gw-build-upgrade-tor
      pkg-install-maybe anon-gateway-packages-dependencies
      pkg-install-maybe anon-gateway-packages-recommended
      pkg-install-maybe whonix-gateway-packages-dependencies
      pkg-install-maybe whonix-gateway-packages-recommended
      if [ "$WHONIX_BUILD_QUBES" = "true" ]; then
         pkg-install-maybe qubes-whonix-gateway
      else
         pkg-install-maybe non-qubes-whonix-gateway
      fi
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      pkg-install-maybe anon-shared-build-inst-tb
      pkg-install-maybe anon-workstation-packages-dependencies
      pkg-install-maybe anon-workstation-packages-recommended
      pkg-install-maybe anon-workstation-default-applications
      pkg-install-maybe whonix-workstation-packages-dependencies
      pkg-install-maybe whonix-workstation-packages-recommended
      if [ "$WHONIX_BUILD_QUBES" = "true" ]; then
         pkg-install-maybe qubes-whonix-workstation
      else
         pkg-install-maybe non-qubes-whonix-workstation
      fi
   else
      error "${red}${bold}ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!${reset}"
   fi

   if [ "$WHONIX_BUILD_QUBES" = "true" ]; then
      pkg-install-maybe qubes-whonix-shared-packages-recommended
      if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
         pkg-install-maybe qubes-whonix-gateway-packages-recommended
      fi
      if [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
         pkg-install-maybe qubes-whonix-workstation-packages-recommended
      fi
      ## debootstrap, which was run by qubes-builder-debian, will have created
      ## a default /etc/fstab.
      ## The qubes-whonix package also ships /etc/fstab.
      ## This would result in an interactive dpkg conflict resolution dialog.
      local temp
      temp=" -o Dpkg::Options::=--force-confnew "
      apt_unattended_opts+="$temp"
      pkg-install-maybe qubes-whonix
      apt_unattended_opts="$(echo "$apt_unattended_opts" | sed "s|$temp||g")"
   fi

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/remove-local-temp-apt-repo"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unprevent-daemons-from-starting"

   ## Forget about local repository containing Whonix's packages.
   #$CHROOT apt-get --no-download --list-cleanup update

   $CHROOT sync
   sync

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unchroot-raw"
   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/unmount-raw"

   sync
}

main() {
   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      install-packages
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      install-packages
   elif [ "$WHONIX_BUILD_CUSTOM_WORKSTATION" = "1" ]; then
      true "${cyan}INFO: Skipping installing packages for $VMNAME.${reset}"
   else
      error "ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!"
   fi
}

main ${1+"$@"}
