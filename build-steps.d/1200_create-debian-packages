#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE${1+"$@"}"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

VMNAME="internalrun"

source pre
source colors
source variables

cd "$MYDIR"
cd ..

signing_key() {
   true "INFO: GPG_AGENT_INFO: $GPG_AGENT_INFO"
   if [ "$WHONIX_BUILD_SIGN_LOCAL_REPOSITORY" = "false" ]; then
      true
   else
      if [ "$GPG_AGENT_INFO" = "" ]; then
         true "${cyan}${bold}INFO: Variable GPG_AGENT_INFO is not set. gnupg-agent will not be available. Did you forget adding -E to sudo?${reset}"
      fi
      ## Eventually letting builder cache its gpg passwords early, so we do not
      ## pause the build process later when reprepro creates the local apt
      ## repository.
      sudo -E -u "$user_name" \
         "$WHONIX_SOURCE_HELP_STEPS_FOLDER/gpg_test_sign"
   fi
}

cleanup_old_packages() {
   true "${cyan}$BASH_SOURCE INFO: Cleaning old packages... ${reset}"

   "$WHONIX_SOURCE_HELP_STEPS_FOLDER/cleanup-files"

   true "${cyan}$BASH_SOURCE INFO: Cleaned old packages. ${reset}"
}

get_extra_packages() {
   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   true "${cyan}$BASH_SOURCE INFO: Getting extra packages... ${reset}"

   rm --recursive --force "$WHONIX_BINARY/temp_extra_packages"
   sudo -E -u "$user_name" mkdir --parents "$WHONIX_BINARY/temp_extra_packages"
   cd "$WHONIX_BINARY/temp_extra_packages"

   ## Update $whonix_build_sources_list_newer package list while keeping
   ## previously updated regular package lists. In other words, prevent
   ## needlessly updating regular package lists.
   $apt_get_update_wrapper_source_path_full \
      $apt_timeout_opts \
      $apt_verify_opts \
      $apt_get_gpgv_opts \
      $apt_misc_opts \
      -o Dir::Etc::sourcelist="$whonix_build_sources_list_newer" \
      -o Dir::Etc::sourceparts="-" \
      -o APT::Get::List-Cleanup="0" \
      update

   ## Download python-stem from $whonix_build_sources_list_newer.
   sudo -E -u "$user_name" \
      apt-get download --yes \
         $apt_timeout_opts \
         $apt_verify_opts \
         $apt_unattended_opts \
         $apt_misc_opts \
         -o Dir::Etc::sourcelist="$whonix_build_sources_list_newer" \
         -o Dir::Etc::sourceparts="-" \
         --target-release "$whonix_build_apt_newer_release_codename" \
         python-stem

   true "INFO: apt-get download exit code: $?"

   ## Get rid of $whonix_build_sources_list_newer package list, while keeping
   ## regular package lists. In other words, prevent needlessly forgetting
   ## about regular package lists.
   apt-get update \
      --no-download \
      --list-cleanup

   true "${cyan}$BASH_SOURCE INFO: Got extra packages. ${reset}"
}

get_tpo_packages() {
   if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
      true "${cyan}$BASH_SOURCE INFO: Skipping $FUNCNAME, because whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only. ${reset}"
      return 0
   fi

   true "${cyan}$BASH_SOURCE INFO: Getting TPO packages... ${reset}"

   rm --recursive --force "$WHONIX_BINARY/temp_tpo_packages"
   sudo -E -u "$user_name" mkdir --parents "$WHONIX_BINARY/temp_tpo_packages"
   cd "$WHONIX_BINARY/temp_tpo_packages"

   local architecture_list architecture
   local package_list_architecture_specific pkg
   local gpg_temp_dir

   ## All architectures currently provided by deb.torproject.org at time of writing.
   architecture_list="armel armhf i386 amd64"

   ## Selected packages we want to mirror from deb.torproject.org to Whonix local/remote repository.
   package_list_architecture_specific="tor"
   package_list_architecture_generic="tor-geoipdb deb.torproject.org-keyring"

   ## Use dpkg multiarch so we can download other architectures than the build host's one using apt-get.
   for architecture in $architecture_list ; do
      dpkg --add-architecture "$architecture"
   done

   ## Sanity tests.
   test -f "$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/usr/share/anon-shared-build-apt-sources-tpo/tpoarchive-keys.d/torprojectarchive.asc"
   test -f "$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list"

   gpg_temp_dir="$(mktemp --directory)"

   ## Convert torprojectarchive.asc into a keyring file that apt-get can use for verification.
   ## This will create $gpg_temp_dir/pubring.gpg.
   gpg \
      --no-options \
      --no-default-keyring \
      --homedir "$gpg_temp_dir" \
      --import "$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/usr/share/anon-shared-build-apt-sources-tpo/tpoarchive-keys.d/torprojectarchive.asc"

   ## Debugging. View contents of $gpg_temp_dir/pubring.gpg.
   gpg \
      --no-options \
      --no-default-keyring \
      --homedir "$gpg_temp_dir" \
      --fingerprint

   ## Sanity test.
   test -f "$gpg_temp_dir/pubring.gpg"

   ## Update tpo package list while keeping
   ## previously updated regular package lists. In other words, prevent
   ## needlessly updating regular package lists.
   $apt_get_update_wrapper_source_path_full \
      $apt_timeout_opts \
      $apt_verify_opts \
      $apt_get_gpgv_opts \
      $apt_misc_opts \
      -o Dir::Etc::trusted="$gpg_temp_dir/pubring.gpg" \
      -o Dir::Etc::trusted.d="-" \
      -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
      -o Dir::Etc::sourceparts="-" \
      -o APT::Get::List-Cleanup="0" \
      update

   ## Download packages from tpo repository.

   for pkg in $package_list_architecture_generic ; do
      sudo -E -u "$user_name" \
         apt-get source --yes \
            $apt_timeout_opts \
            $apt_verify_opts \
            $apt_unattended_opts \
            $apt_misc_opts \
            -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
            -o Dir::Etc::sourceparts="-" \
            "$pkg"
      true "INFO: apt-get source exit code: $?"

      sudo -E -u "$user_name" \
         apt-get download --yes \
            $apt_timeout_opts \
            $apt_verify_opts \
            $apt_unattended_opts \
            $apt_misc_opts \
            -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
            -o Dir::Etc::sourceparts="-" \
            "$pkg:all"
      true "INFO: apt-get download exit code: $?"
   done

   for pkg in $package_list_architecture_specific ; do
      sudo -E -u "$user_name" \
         apt-get source --yes \
            $apt_timeout_opts \
            $apt_verify_opts \
            $apt_unattended_opts \
            $apt_misc_opts \
            -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
            -o Dir::Etc::sourceparts="-" \
            "$pkg"
      true "INFO: apt-get source exit code: $?"
      for architecture in $architecture_list ; do
         sudo -E -u "$user_name" \
            apt-get download --yes \
               $apt_timeout_opts \
               $apt_verify_opts \
               $apt_unattended_opts \
               $apt_misc_opts \
               -o Dir::Etc::sourcelist="$WHONIX_SOURCE_FOLDER/packages/anon-shared-build-apt-sources-tpo/etc/apt/sources.list.d/torproject.list" \
               -o Dir::Etc::sourceparts="-" \
               "$pkg:$architecture"
         true "INFO: apt-get download exit code: $?"
      done
   done

   ## Get rid of tpo package list, while keeping
   ## regular package lists. In other words, prevent needlessly forgetting
   ## about regular package lists.
   apt-get update \
      --no-download \
      --list-cleanup

   true "${cyan}$BASH_SOURCE INFO: Got tpo packages. ${reset}"
}

create_whonix_debian_packages_without_building_system() {
   true "${cyan}$BASH_SOURCE INFO: Creating Whonix Debian Packages... ${reset}"

   local number_folders_total number_folder_current benchmark_time_start benchmark_took_time
   ## Thanks to: l0b0 - http://unix.stackexchange.com/a/20855/49297
   number_folders_total="$(find "$WHONIX_SOURCE_FOLDER/packages" -mindepth 1 -maxdepth 1 -type d -printf '\n' | wc -l)" || true
   number_folder_current="0"

   [ -n "$make_use_lintian" ] || make_use_lintian="true"

   shopt -s nullglob
   shopt -s dotglob

   for item in "$WHONIX_SOURCE_FOLDER/packages/"*; do
      if [ ! -d "$item" ]; then
         true "INFO: Not a folder: $item"
         continue
      fi
      cd "$item"
      number_folder_current="$(( number_folder_current + 1 ))"
      local base_name
      base_name="${item##*/}"
      if [ "$base_name" = "whonix-developer-meta-files" ]; then
         true "${cyan}INFO: Skipping $base_name as expected.${reset}"
         continue
      fi
      if [ "$whonix_build_pkg_apparmor_only" = "true" ]; then
         if [ "$(echo "$base_name" | grep "apparmor-profile-")" ]; then
            true "${cyan}INFO: Building apparmor profile: $base_name ${reset}"
         else
            true "${cyan}INFO${reset}: Skipping $base_name as expected because using whonix_build_pkg_apparmor_only is set to $whonix_build_pkg_apparmor_only."
            continue
         fi
      fi
      true "${cyan}INFO: Will build now package ($number_folder_current / $number_folders_total): $base_name ${reset}"
      benchmark_time_start="$(date +%s)" || true
      ## The make_use_lintian is supported by the generic Makefile.
      #if [ "$base_name" = "qubes-whonix" ]; then
         #lintian_use_maybe="false"
      #else
      lintian_use_maybe="$make_use_lintian"
      #fi
      local make_file="Makefile"
      test -f "$make_file"
      sudo -E -u "$user_name" make_use_lintian="$lintian_use_maybe" make -f "$make_file" deb-pkg
      benchmark_took_time="$(benchmarktimeend "$benchmark_time_start")" || true
      true "${cyan}INFO: Done with build of package ($number_folder_current / $number_folders_total) (benchmark: $benchmark_took_time): $base_name ${reset}"
   done

   true "${cyan}$BASH_SOURCE INFO: Created Whonix Debian Packages. ${reset}"
}

create_whonix_repository() {
   if [ "$WHONIX_BUILD_APT_CODENAME" = "local" ]; then
      true "${cyan}$BASH_SOURCE INFO: Purging ${under}local${eunder} APT repository... ${reset}"
      sudo -E -u "$user_name" \
         reprepro \
            -V \
            -V \
            $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
            $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
            removematched "$WHONIX_BUILD_APT_CODENAME" "*"
      true "${cyan}$BASH_SOURCE INFO: Done, purged ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository. ${reset}"
   else
      true "${cyan}$BASH_SOURCE INFO: Not purging APT repository, because distribution is ${under}${WHONIX_BUILD_APT_CODENAME}${eunder}. ${reset}"
   fi

   true "${cyan}$BASH_SOURCE INFO: Creating ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"

   shopt -s dotglob
   shopt -s nullglob
   local file_name folder file_count_array check_folder check_folders

   check_folders+=" $WHONIX_SOURCE_FOLDER/packages "
   check_folders+=" $WHONIX_BINARY/temp_extra_packages "
   check_folders+=" $WHONIX_BINARY/temp_tpo_packages "

   true "${cyan}$BASH_SOURCE INFO: Going to check the following folders for .deb and .dsc files... ${reset}"

   for folder in $check_folders ; do
      true "${cyan}$folder ${reset}"
   done

   true "${cyan}$BASH_SOURCE INFO: Importing .deb and .dsc files... ${reset}"

   for folder in $check_folders ; do
      true "folder: $folder"
      if [ ! -d "$folder" ]; then
         true "${cyan}$BASH_SOURCE INFO: Folder $folder does not exist, skipping. ok. ${reset}"
         continue
      fi

      file_count_array=( $(find "$folder" -maxdepth 1 -name "*.deb") )
      if [ ${#file_count_array[@]} -gt 0 ]; then
         true "${cyan}$BASH_SOURCE INFO: Importing $folder .deb files... ${reset}"
         for file_name in "$folder/"*".deb" ; do
            sudo -E -u "$user_name" \
               reprepro \
                  --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
                  $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
                  $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
                  includedeb "$WHONIX_BUILD_APT_CODENAME" "$file_name"
         done
         true "${cyan}$BASH_SOURCE INFO: Done, imported $folder .deb files. ${reset}"
      else
         true "${cyan}$BASH_SOURCE INFO: Folder $folder does not contain and .deb files, skipping. ok. ${reset}"
         continue
      fi

      file_count_array=( $(find "$folder" -maxdepth 1 -name "*.deb") )
      if [ ${#file_count_array[@]} -gt 0 ]; then
         true "${cyan}$BASH_SOURCE INFO: Importing $folder .dsc files... ${reset}"
         for file_name in "$folder/"*".dsc" ; do
            sudo -E -u "$user_name" \
               reprepro \
                  --basedir "$WHONIX_APT_REPOSITORY_FOLDER" \
                  $WHONIX_BUILD_REPREPRO_SIGNING_OPTIONS \
                  $WHONIX_BUILD_REPREPRO_FOLDER_OPTIONS \
                  includedsc "$WHONIX_BUILD_APT_CODENAME" "$file_name"
         done
         true "${cyan}$BASH_SOURCE INFO: Done, imported $folder .dsc files. ${reset}"
      else
         true "${cyan}$BASH_SOURCE INFO: Folder $folder does not contain and .dsc files, skipping. ok. ${reset}"
      fi
   done

   true "${cyan}$BASH_SOURCE INFO: Imported .deb and .dsc files. ${reset}"

   true "${cyan}$BASH_SOURCE INFO: Done, created ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository. ${reset}"
}

create-debian-packages() {
   cleanup_old_packages

   source "$WHONIX_SOURCE_HELP_STEPS_FOLDER/git_sanity_test" ${1+"$@"}
   git_sanity_test_main ${1+"$@"}

   true "${cyan}$BASH_SOURCE INFO: Going to update ${under}${WHONIX_BUILD_APT_CODENAME}${eunder} APT repository... ${reset}"
   sleep 3

   signing_key
   #get_extra_packages
   get_tpo_packages
   create_whonix_debian_packages_without_building_system
   create_whonix_repository
}

main() {
   root_check
   if [ "$WHONIX_BUILD_CUSTOM_WORKSTATION" = "1" ]; then
      true "${cyan}INFO: Skipping creation of packages for custom workstation.${reset}"
   else
      create-debian-packages ${1+"$@"}
   fi
}

main ${1+"$@"}
